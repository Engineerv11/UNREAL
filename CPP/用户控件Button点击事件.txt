// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Components/Button.h"
#include "Blueprint/UserWidget.h"
#include "MainInterface.generated.h"

UCLASS()
class UMainInterface : public UUserWidget
{
	GENERATED_BODY()
public:
	UMainInterface(const FObjectInitializer& ObjectInitializer);
	
	UPROPERTY(meta = (BindWidget))
		UButton* StartButton;
	UPROPERTY(meta = (BindWidget))
		UButton* QuitButton;

	virtual bool Initialize() override;

	UFUNCTION()
		void OnStartButtonClicked();
	UFUNCTION()
		void OnQuitButtonClicked();

};


// Fill out your copyright notice in the Description page of Project Settings.

#include "MainInterface.h"

UMainInterface::UMainInterface(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
{
}

bool UMainInterface::Initialize()
{
	if (!Super::Initialize())
	{
		return false;
	}

	StartButton->OnClicked.AddDynamic(this, &UMainInterface::OnStartButtonClicked);
	QuitButton->OnClicked.AddDynamic(this, &UMainInterface::OnQuitButtonClicked);

    // 获取当前世界
    UWorld* World = GetWorld();
    if (World)
    {
        // 获取第一个玩家控制器
        APlayerController* PlayerController = World->GetFirstPlayerController();
        if (PlayerController)
        {
            // 切换鼠标光标的可见性
            // 注意：这里我们假设你想要切换（显示/隐藏），而不是简单地设置为显示
            PlayerController->bShowMouseCursor = true;

            // 如果你只是想设置为显示，可以直接使用：
            // PlayerController->ShowMouseCursor(true);
        }
    }

	return false;
}

void UMainInterface::OnStartButtonClicked()
{
	GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, TEXT("Start Clicked"));
}

void UMainInterface::OnQuitButtonClicked()
{
	GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, TEXT("Quit Clicked"));
}



创建蓝图，创建按钮控件，名称和C++代码保持一致，然后，继承自MainInterface

需要先在蓝图创建对应的控件，保持命名一致，然后再继承自MainInterface，否则将会导致引擎崩溃